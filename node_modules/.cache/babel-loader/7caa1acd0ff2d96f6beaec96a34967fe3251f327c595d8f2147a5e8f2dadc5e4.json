{"ast":null,"code":"var _jsxFileName = \"E:\\\\Edureka\\\\zomato\\\\src\\\\Component\\\\Filter.js\";\nimport React, { Component } from 'react';\n// import './style11.css'\n// import './Style/style1.css'\n// import Header from '../HeaderComp/Header'\nimport Header from './Header';\nimport queryString from 'query-string';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Filter extends Component {\n  constructor() {\n    super();\n    this.componentDidMount = async () => {\n      // Get the values from query string which is coming from homepage, Quick Search component\n      //   const qs = queryString.parse(this.props.location);\n      //   const location = qs.location;\n      //   const mealtype = Number(qs.mealtype);\n      //   const mealtype_name = qs.mealtype_name;\n\n      //   this.setState({ option: mealtype_name });\n      //   // Declare the locations and mealtypes value in payload.\n      //   const inputObj = {\n      //       location_id: location,\n      //       mealtype_id: mealtype\n      //   }\n\n      //   // Making api call to fetch the restaurant data based on payload.\n      //   const restuarant = await axios({\n      //       method: 'POST',\n      //       url: 'http://localhost:8100/filter',\n      //       headers: { 'Content-Type': 'application/json' },\n      //       data: inputObj\n      //   })\n      //   // once get the value then update the state variable.\n      //   this.setState({ restuarant: restuarant.data, mealtype_id: mealtype, location_id: location });\n\n      // Making api call for locations data to showing drop-downs filters.\n      const locationDD = await axios({\n        method: 'GET',\n        url: 'http://localhost:8100/locations',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      // Update the location variable in state.\n      this.setState({\n        location: locationDD.data\n      });\n      console.log(\"Hello\", this.state.location);\n    };\n    // User clicks locations drop down menu this will execute.\n    this.handleLocationChange = async event => {\n      // Getting the location id from drop-down.\n      const location_id = event.target.value;\n      console.log(location_id);\n      const {\n        sort,\n        mealtype_id,\n        lcost,\n        hcost,\n        cuisine_id\n      } = this.state;\n\n      // Loading the all values in payload.\n      const inputObj = {\n        sort: sort,\n        mealtype_id: mealtype_id,\n        location_id: location_id,\n        lcost: lcost,\n        hcost: hcost,\n        // if cuisine_id is empty array, this function willn't work so set the value as undefined.\n        cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\n      };\n      // Making the api call to get location based restaurant data.\n      const restuarant = await axios({\n        method: 'POST',\n        url: 'http://localhost:8100/filter',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: inputObj\n      });\n      // Once get the data, then update restaurant, location id and page number in 1.\n      this.setState({\n        restuarant: restuarant.data,\n        location_id,\n        currentPage: 1\n      });\n    };\n    // User clicks on cuisine check-box this function will execute.\n    this.handleCuisineChange = async value => {\n      //get all values from the checkbox and slice the values into tempArray, if repeated selection splice it\n      let tempArray = this.state.cuisine_id.slice();\n      if (tempArray.indexOf(value) === -1) {\n        tempArray.push(value);\n      } else {\n        tempArray.splice(tempArray.indexOf(value), 1);\n      }\n      const {\n        sort,\n        mealtype_id,\n        location_id,\n        lcost,\n        hcost\n      } = this.state;\n      // Loading the all values in payload.\n      const inputObj = {\n        sort: sort,\n        mealtype_id: mealtype_id,\n        location_id: location_id,\n        lcost: lcost,\n        hcost: hcost,\n        cuisine_id: tempArray.length > 0 ? tempArray : undefined\n      };\n      // Making the api call to fetch the cuisine based restaurant data.\n      const restuarant = await axios({\n        method: 'POST',\n        url: 'http://localhost:8100/filter',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: inputObj\n      });\n      // Once get the data, then update restaurant, cuisne id and page number in 1.\n      this.setState({\n        restuarant: restuarant.data,\n        cuisine_id: tempArray,\n        currentPage: 1\n      });\n    };\n    // User clicks the cost  button this function will execute.\n    this.handleCost = async (lcost, hcost) => {\n      const {\n        sort,\n        mealtype_id,\n        location_id,\n        cuisine_id\n      } = this.state;\n      // loading all values in payload.\n      const inputObj = {\n        sort: sort,\n        mealtype_id: mealtype_id,\n        location_id: location_id,\n        lcost: lcost,\n        hcost: hcost,\n        // if cuisine_id is empty array, this function willn't work so set the value as undefined.\n        cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\n      };\n      // making api call to get expected cost based restaurant data.\n      const restuarant = await axios({\n        method: 'POST',\n        url: 'http://localhost:8100/filter',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: inputObj\n      });\n      // Once get the data, then update restaurant, lcost, hcost and page number in 1.\n      this.setState({\n        restuarant: restuarant.data,\n        lcost,\n        hcost,\n        currentPage: 1\n      });\n    };\n    // User clicks the sort button this function will execute.\n    this.handleSort = async sort => {\n      const {\n        mealtype_id,\n        location_id,\n        lcost,\n        hcost,\n        cuisine_id\n      } = this.state;\n      // loading the values in payload\n      const inputObj = {\n        sort: sort,\n        mealtype_id: mealtype_id,\n        location_id: location_id,\n        lcost: lcost,\n        hcost: hcost,\n        // if cuisine_id is empty array, this function willn't work so set the value as undefined.\n        cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\n      };\n      // Making api call to sorting data.\n      const restuarant = await axios({\n        method: 'POST',\n        url: 'http://localhost:8100/filter',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: inputObj\n      });\n      // Once get the data, then update restaurant, sort and page number as 1.\n      this.setState({\n        restuarant: restuarant.data,\n        sort,\n        currentPage: 1\n      });\n    };\n    // User clicks the pagenumber will upadate current page number in state.\n    this.handleClickPage = event => {\n      this.setState({\n        currentPage: Number(event.target.id)\n      });\n    };\n    this.handlePrev = () => {\n      this.setState({\n        currentPage: this.state.currentPage - 1\n      });\n    };\n    this.handleNext = () => {\n      this.setState({\n        currentPage: this.state.currentPage + 1\n      });\n    };\n    this.handleViewRestaurant = id => {\n      this.props.history.push(`/details?restaurant=${id}`);\n    };\n    this.state = {\n      restuarant: [],\n      // Whole restuarant data.\n      option: \"\",\n      // This shows heading based on what mealtypes we clicks. (ex) Breakfast places in delhi.\n      currentPage: 1,\n      // This is current page which default value is 1.\n      itemsPerPage: 2,\n      // This how many restaurant data will show per page. ideally 2.\n      mealtype_id: undefined,\n      // This is mealtype_id\n      location_id: undefined,\n      // This is location_id\n      sort: 1,\n      // This is sort value. if (1) = Ascending order , (-1) = Descending order.\n      cuisine_id: [],\n      // This is cuisine_id. Initially empty array.\n      lcost: undefined,\n      // This is minimum price for restaurant.\n      hcost: undefined,\n      // This is maximum price for restaurant.\n      location: [] // This is locations dropdown data.\n    };\n  }\n\n  render() {\n    const {\n      restuarant,\n      location,\n      itemsPerPage,\n      currentPage\n    } = this.state;\n    // This is the pagination logic to showing restaurant data per page.\n    const lastIndex = currentPage * itemsPerPage;\n    const firstIndex = lastIndex - itemsPerPage;\n    const currentRestuarant = restuarant.slice(firstIndex, lastIndex);\n    let result;\n\n    // Calculating the total page numbers and push into new array.\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(restuarant.length / itemsPerPage); i++) {\n      pageNumbers.push(i);\n    }\n    // iterating the page numbers and showing in display with styling.\n\n    // This is the logic for prev button in pagination\n    let prevButton;\n    if (pageNumbers.length === 1) {\n      prevButton = /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          display: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"page-link\",\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 31\n      }, this);\n    }\n    if (pageNumbers.length > 1) {\n      prevButton = /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"page-list\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"page-numbers\",\n          onClick: this.handlePrev,\n          children: `<`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 31\n      }, this);\n    }\n    if (currentPage === 1 && pageNumbers.length > 1) {\n      prevButton = /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"page-list disabled\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"page-numbers\",\n          children: `<`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 66\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 31\n      }, this);\n    }\n    // This is the logic for next button in pagination\n    let nextButton;\n    if (pageNumbers.length === 1) {\n      nextButton = /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          display: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"page-link\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 31\n      }, this);\n    }\n    if (pageNumbers.length > 1) {\n      nextButton = /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"page-list\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"page-numbers\",\n          onClick: this.handleNext,\n          children: `>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 31\n      }, this);\n    }\n    if (currentPage === pageNumbers.length && pageNumbers.length > 1) {\n      nextButton = /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"page-list disabled\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"page-numbers\",\n          children: `>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 66\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 31\n      }, this);\n    }\n    // Rendering page numbers\n    let renderPageNumbers = pageNumbers.map(number => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"page-list\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"page-numbers\",\n          style: currentPage === number ? {\n            background: '#192f60',\n            color: '#fff'\n          } : {},\n          href: \"#\",\n          id: number,\n          onClick: this.handleClickPage,\n          children: number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 26\n        }, this)\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 22\n      }, this);\n    });\n    result = currentRestuarant.length > 0 ? currentRestuarant.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightGridItem1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-12\",\n          onClick: () => this.handleViewRestaurant(item._id),\n          style: {\n            cursor: 'pointer'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.thumb,\n            alt: \"Image cannot be displayed\",\n            className: \"imgUdipi\",\n            style: {\n              borderRadius: \"25px\",\n              margin: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"divUdipi\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"spanUdipi\",\n              style: {\n                fontSize: '25px'\n              },\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 116\n            }, this), item.address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 35\n            }, this), \"Address   :\", item.locality, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 45\n            }, this), \"Cuisine   :\", item.cuisine_id.map(cuis => cuis.name + \" \"), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 77\n            }, this), \"Cost For Two:\\u20B9\", item.cost]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 28\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        textAlign: 'center',\n        fontSize: '35px',\n        fontWeight: 'bold'\n      },\n      children: \"No Restaurants in this Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 24\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Breakfast Places in Mumbai\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leftDiv\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Select Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"Location\",\n            onChange: this.handleLocationChange,\n            children: location.map(item => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.location_id,\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 28\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Cuisine\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Cuisine\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"north\",\n              value: \"N_Indian\",\n              onChange: () => this.handleCuisineChange(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"north\",\n              children: \" North Indian\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 57\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"south\",\n              value: \"S_Indian\",\n              onChange: () => this.handleCuisineChange(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"south\",\n              children: \" South Indian\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 57\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"chinese\",\n              value: \"Chinese\",\n              onChange: () => this.handleCuisineChange(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"chinese\",\n              children: \" Chinese\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 54\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"ffood\",\n              value: \"F_Food\",\n              onChange: () => this.handleCuisineChange(4)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"ffood\",\n              children: \" Fast Food\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 54\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"sfood\",\n              value: \"S_Food\",\n              onChange: () => this.handleCuisineChange(5)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"sfood\",\n              children: \" Street Food\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cost2Div\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Cost for two\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"cuisinoption\",\n              name: \"cost\",\n              onChange: () => this.handleCost(1, 500)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Less Than \\u20B9500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"cuisinoption\",\n              name: \"cost\",\n              onChange: () => this.handleCost(500, 1000)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\u20B9500 to \\u20B91000\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"CusineOptions\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"cuisinoption\",\n              name: \"cost\",\n              onChange: () => this.handleCost(1000, 1500)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\u20B91000 to \\u20B91500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"cuisinoption\",\n              name: \"cost\",\n              onChange: () => this.handleCost(1500, 2000)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\u20B91500 to \\u20B92000\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"cuisinoption\",\n              name: \"cost\",\n              onChange: () => this.handleCost(2000, 2500)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\u20B92000+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sort\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Sort\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"cuisinoption\",\n              name: \"price\",\n              onChange: () => this.handleSort(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"price low to high\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 3\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"cuisinoption\",\n              name: \"price\",\n              onChange: () => this.handleSort(-1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"price high to low\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"Pagination\",\n            children: [result, /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [prevButton, renderPageNumbers, nextButton]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Filter;\n\n// import React, { Component } from 'react'\n// // import './style11.css'\n\n// // import Header from '../HeaderComp/Header'\n// import queryString from 'query-string'\n// import axios from 'axios'\n\n// export  class Filter extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//         restuarant: [],          // Whole restuarant data.\n//         // option: \"\",              // This shows heading based on what mealtypes we clicks. (ex) Breakfast places in delhi.\n//         currentPage: 1,           // This is current page which default value is 1.\n//         itemsPerPage: 2,         // This how many restaurant data will show per page. ideally 2.\n//         mealtype_id: undefined,  // This is mealtype_id\n//         location_id: undefined,  // This is location_id\n//         sort: 1,                 // This is sort value. if (1) = Ascending order , (-1) = Descending order.\n//         cuisine_id: [],          // This is cuisine_id. Initially empty array.\n//         lcost: undefined,        // This is minimum price for restaurant.\n//         hcost: undefined,        // This is maximum price for restaurant.\n//         location: []             // This is locations dropdown data.\n//     }\n// }\n\n//     componentDidMount = async () => {\n//       // Get the values from query string which is coming from homepage, Quick Search component\n//       const qs = queryString.parse(this.props.location.search);\n//       const location = qs.location;\n//       const mealtype = Number(qs.mealtype);\n//       const mealtype_name = qs.mealtype_name;\n// console.log(mealtype_name)\n//       this.setState({ option: mealtype_name });\n//       // Declare the locations and mealtypes value in payload.\n//       const inputObj = {\n//           location_id: location,\n//           mealtype_id: mealtype\n//       }\n\n//       // Making api call to fetch the restaurant data based on payload.\n//       const restuarant = await axios({\n//           method: 'POST',\n//           url: 'http://localhost:8100/filter',\n//           headers: { 'Content-Type': 'application/json' },\n//           data: inputObj\n//       })\n//       // once get the value then update the state variable.\n//       this.setState({ restuarant: restuarant.data, mealtype_id: mealtype, location_id: location });\n\n//       // Making api call for locations data to showing drop-downs filters.\n//       const locationDD = await axios({\n//         method: 'GET',\n//         url: 'http://localhost:8100/locations',\n//         headers: { 'Content-Type': 'application/json' }\n//     });\n//     // Update the location variable in state.\n//     this.setState({ location: locationDD.data });\n//     console.log(\"Hello\",this.state.location)\n// }\n\n//     // User clicks locations drop down menu this will execute.\n//     handleLocationChange = async (event) => {\n//       // Getting the location id from drop-down.\n//       const location_id = event.target.value;\n//       console.log(location_id);\n//       const { sort, mealtype_id, lcost, hcost, cuisine_id } = this.state;\n\n//       // Loading the all values in payload.\n//       const inputObj = {\n//           sort: sort,\n//           mealtype_id: mealtype_id,\n//           location_id: location_id,\n//           lcost: lcost,\n//           hcost: hcost,\n//           // if cuisine_id is empty array, this function willn't work so set the value as undefined.\n//           cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\n//       }\n//       // Making the api call to get location based restaurant data.\n//       const restuarant = await axios({\n//           method: 'POST',\n//           url: 'http://localhost:8100/filter',\n//           headers: { 'Content-Type': 'application/json' },\n//           data: inputObj\n//       });\n//       // Once get the data, then update restaurant, location id and page number in 1.\n//       this.setState({ restuarant: restuarant.data, location_id, currentPage: 1 });\n//   }\n\n//    // User clicks on cuisine check-box this function will execute.\n//    handleCuisineChange = async (value) => {\n//     //get all values from the checkbox and slice the values into tempArray, if repeated selection splice it\n//     let tempArray = this.state.cuisine_id.slice();\n//     if (tempArray.indexOf(value) === -1) {\n//         tempArray.push(value);\n//     } else {\n//         tempArray.splice(tempArray.indexOf(value), 1);\n//     }\n\n//     const { sort, mealtype_id, location_id, lcost, hcost } = this.state;\n//     // Loading the all values in payload.\n//     const inputObj = {\n//         sort: sort,\n//         mealtype_id: mealtype_id,\n//         location_id: location_id,\n//         lcost: lcost,\n//         hcost: hcost,\n//         cuisine_id: tempArray.length > 0 ? tempArray : undefined\n//     }\n//     // Making the api call to fetch the cuisine based restaurant data.\n//     const restuarant = await axios({\n//         method: 'POST',\n//         url: 'http://localhost:8100/filter',\n//         headers: { 'Content-Type': 'application/json' },\n//         data: inputObj\n//     });\n//     // Once get the data, then update restaurant, cuisne id and page number in 1.\n//     this.setState({ restuarant: restuarant.data, cuisine_id: tempArray, currentPage: 1 });\n// }\n\n//     // User clicks the cost  button this function will execute.\n//     handleCost = async (lcost, hcost) => {\n//       const { sort, mealtype_id, location_id, cuisine_id } = this.state;\n//       // loading all values in payload.\n//       const inputObj = {\n//           sort: sort,\n//           mealtype_id: mealtype_id,\n//           location_id: location_id,\n//           lcost: lcost,\n//           hcost: hcost,\n//           // if cuisine_id is empty array, this function willn't work so set the value as undefined.\n//           cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\n\n//       }\n//       // making api call to get expected cost based restaurant data.\n//       const restuarant = await axios({\n//           method: 'POST',\n//           url: 'http://localhost:8100/filter',\n//           headers: { 'Content-Type': 'application/json' },\n//           data: inputObj\n//       });\n//       // Once get the data, then update restaurant, lcost, hcost and page number in 1.\n//       this.setState({ restuarant: restuarant.data, lcost, hcost, currentPage: 1 });\n//     }    \n\n//     // User clicks the sort button this function will execute.\n//     handleSort = async (sort) => {\n//       const { mealtype_id, location_id, lcost, hcost, cuisine_id } = this.state;\n//       // loading the values in payload\n//       const inputObj = {\n//           sort: sort,\n//           mealtype_id: mealtype_id,\n//           location_id: location_id,\n//           lcost: lcost,\n//           hcost: hcost,\n//           // if cuisine_id is empty array, this function willn't work so set the value as undefined.\n//           cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\n//       }\n//       // Making api call to sorting data.\n//       const restuarant = await axios({\n//           method: 'POST',\n//           url: 'http://localhost:8100/filter',\n//           headers: { 'Content-Type': 'application/json' },\n//           data: inputObj\n//       })\n//       // Once get the data, then update restaurant, sort and page number as 1.\n//       this.setState({ restuarant: restuarant.data, sort, currentPage: 1 })\n//   }\n\n//    // User clicks the pagenumber will upadate current page number in state.\n//    handleClickPage = (event) => {\n//     this.setState({ currentPage: Number(event.target.id) });\n// }\n\n// handlePrev = () => {\n//     this.setState({ currentPage: this.state.currentPage - 1 });\n// }\n\n// handleNext = () => {\n//     this.setState({ currentPage: this.state.currentPage + 1 });\n// }\n\n// handleViewRestaurant = (id) => {\n//     this.props.history.push(`/details?restaurant=${id}`);\n// }\n\n//   render() {\n\n//     const { restuarant,location,itemsPerPage,currentPage} = this.state;\n//      // This is the pagination logic to showing restaurant data per page.\n//      const lastIndex = currentPage * itemsPerPage;\n//      const firstIndex = lastIndex - itemsPerPage;\n//      const currentRestuarant = restuarant.slice(firstIndex, lastIndex);\n//      let result;\n\n//              // Calculating the total page numbers and push into new array.\n//              const pageNumbers = [];\n//              for (let i = 1; i <= Math.ceil(restuarant.length / itemsPerPage); i++) {\n//                  pageNumbers.push(i);\n//              }   \n//              // iterating the page numbers and showing in display with styling.\n\n//              // This is the logic for prev button in pagination\n//              let prevButton;\n//              if (pageNumbers.length === 1) {\n//                  prevButton = <li style={{ display: 'none' }}><a href=\"#\" className=\"page-link\" >Prev</a></li>\n//              }\n//              if (pageNumbers.length > 1) {\n//                  prevButton = <li className=\"page-list\"><a href=\"#\" className=\"page-numbers\" onClick={this.handlePrev}>{`<`}</a></li>\n//              }\n//              if (currentPage === 1 && pageNumbers.length > 1) {\n//                  prevButton = <li className=\"page-list disabled\"><a className=\"page-numbers\" >{`<`}</a></li>\n//              }\n//              // This is the logic for next button in pagination\n//              let nextButton;\n//              if (pageNumbers.length === 1) {\n//                  nextButton = <li style={{ display: 'none' }}><a href=\"#\" className=\"page-link\" >Next</a></li>\n//              }\n//              if (pageNumbers.length > 1) {\n//                  nextButton = <li className=\"page-list\"><a href=\"#\" className=\"page-numbers\" onClick={this.handleNext}>{`>`}</a></li>\n//              }\n//              if (currentPage === pageNumbers.length && pageNumbers.length > 1) {\n//                  nextButton = <li className=\"page-list disabled\"><a className=\"page-numbers\">{`>`}</a></li>\n//              }\n//              // Rendering page numbers\n//              let renderPageNumbers = pageNumbers.map(number => {\n//                  return (\n//                      <li key={number} className=\"page-list\">\n//                          <a className=\"page-numbers\" style={currentPage === number ? { background: '#192f60', color: '#fff' } : {}} href=\"#\" id={number} onClick={this.handleClickPage}>{number}</a>\n//                      </li>\n//                  )\n//              })\n\n//              result= (currentRestuarant.length>0) ? currentRestuarant.map((item)=>{\n//                 return     <div className=\"rightGridItem1\">\n//                 <div className=\"col-sm-12\" onClick={() => this.handleViewRestaurant(item._id)} style={{ cursor: 'pointer' }}>\n//                  <img src={item.thumb }alt=\"Image cannot be displayed\" className=\"imgUdipi\" \n//                   style={{ borderRadius: \"25px\", margin: \"20px\" }} /> \n//                <div className=\"divUdipi\"> <span className=\"spanUdipi\" style ={{fontSize:'25px'}}>{item.name}</span><br/>\n//                     {item.address}<br/>\n//                  Address   :{item.locality }<hr/>\n//                  Cuisine   :{item.cuisine_id.map((cuis) => cuis.name + \" \")}<br/>\n//                  Cost For Two:₹{item.cost}</div>           \n\n//             </div>\n//             </div>  }):<div style={{color:'red',textAlign:'center',fontSize:'35px',fontWeight:'bold'}}>No Restaurants in this Category</div>\n\n//     return (\n//       <div>\n//           {/* <Header/> */}\n//            {/* <div className=\"NavBar\" >\n//         <div className=\"logoE\" >e!</div>\n//                       <div className=\"NavBar-Box\">\n//                         <button className=\"LoginButton\" >Login</button>\n//                         <button className=\"CreateButton\">Create an Account</button>\n//                       </div>\n//          </div>  */}\n\n//         <h1>Breakfast Places in Mumbai</h1>\n\n//      {/*<!--Grid with 2 columns.Left grid with filter options and right grid with restaurant details-->  */} \n//      <div className=\"parentContainer\" >\n//         <div className=\"leftDiv\">\n//                 <h3> Filters</h3> \n//                 <h3>Select Location</h3>\n\n//                 <select className=\"Location\" onChange={this.handleLocationChange}>\n//                   {location.map((item)=>{\n//                     return <option value={item.location_id}>{item.name}</option>\n//                   })}\n//                     {/* <option value=\"nmum\" >North Mumbai</option>\n//                     <option value=\"smum\" >South Mumbai</option>\n//                     <option value=\"emum\" >East Mumbai</option>\n//                     <option value=\"wmum\" >West Mumbai</option>\n//                     <option value=\"Thane\" >Thane</option> */}\n//                 </select>\n\n//                 <div className=\"Cuisine\"><h3>Cuisine</h3>                \n//                 <input type=\"checkbox\" name=\"north\" value=\"N_Indian\" onChange={() => this.handleCuisineChange(1)}/>\n//                 <label for=\"north\"> North Indian</label><br/>\n//                 <input type=\"checkbox\"  name=\"south\" value=\"S_Indian\" onChange={() => this.handleCuisineChange(2)}/>\n//                 <label for=\"south\"> South Indian</label><br/>\n//                 <input type=\"checkbox\"  name=\"chinese\" value=\"Chinese\" onChange={() => this.handleCuisineChange(3)}/>\n//                 <label for=\"chinese\"> Chinese</label><br/>\n//                 <input type=\"checkbox\"  name=\"ffood\" value=\"F_Food\" onChange={() => this.handleCuisineChange(4)}/>\n//                 <label for=\"ffood\"> Fast Food</label><br/>\n//                 <input type=\"checkbox\"  name=\"sfood\" value=\"S_Food\"onChange={() => this.handleCuisineChange(5)}/>\n//                 <label for=\"sfood\"> Street Food</label>\n//                 </div>\n\n//                 <div className=\"cost2Div\" > <h3>Cost for two</h3>\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1, 500)}/>\n//                 <label>Less Than &#8377;500</label>\n\n//     <br/>\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\"onChange={() => this.handleCost(500,1000)}/>\n//                 <label>&#8377;500 to &#8377;1000</label>\n\n//                 </div>\n\n//                 <div className=\"CusineOptions\">\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1000, 1500)}/>\n//                 <label>&#8377;1000 to &#8377;1500</label>\n\n//     <br/>\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1500, 2000)}/>\n//                 <label>&#8377;1500 to &#8377;2000</label>\n\n//     <br/>\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(2000, 2500)}/>\n//                 <label>&#8377;2000+</label>\n\n//                 </div>\n\n//               <div className=\"sort\"><h3>Sort</h3>\n//               <input type=\"radio\" className=\"cuisinoption\" name=\"price\" onChange={() => this.handleSort(1)}/>\n//               <label>price low to high</label>\n\n//   <br/>\n//               <input type=\"radio\" className=\"cuisinoption\" name=\"price\" onChange={() => this.handleSort(-1)}/>\n//               <label>price high to low</label>\n\n//             </div>  \n\n//         </div>\n//         <div className=\"rightDiv\">\n\n//               {/* {(restuarant.lengtht>0) ?   */}\n//             {/* {result= (currentRestuarant.length>0) ? currentRestuarant.map((item)=>{\n//                 return     <div className=\"rightGridItem1\">\n//                 <div className=\"col-sm-12\" onClick={() => this.handleViewRestaurant(item._id)} style={{ cursor: 'pointer' }}>\n//                  <img src={item.thumb }alt=\"Image cannot be displayed\" className=\"imgUdipi\" \n//                   style={{ borderRadius: \"25px\", margin: \"20px\" }} /> \n//                <div className=\"divUdipi\"> <span className=\"spanUdipi\" style ={{fontSize:'25px'}}>{item.name}</span><br/>\n//                     {item.address}<br/>\n//                  Address   :{item.locality }<hr/>\n//                  Cuisine   :{item.cuisine_id.map((cuis) => cuis.name + \" \")}<br/>\n//                  Cost For Two:₹{item.cost}</div>           \n\n//             </div>\n//             </div>  }):<div style={{color:'red',textAlign:'center',fontSize:'35px',fontWeight:'bold'}}>No Restaurants in this Category</div>} */}\n\n//             <div class=\"Pagination\">\n//                 {result}\n//                 <div  >\n\n//                                         {/* Rendering Page numbers */}\n//                                         {prevButton}\n//                                         {renderPageNumbers}\n//                                         {nextButton}\n\n//                 </div>\n//         {/* <a href=\"#\">&laquo;</a>\n//         <a href=\"#\">1</a>\n//         <a href=\"#\">2</a>\n//         <a href=\"#\">3</a>\n//         <a href=\"#\">4</a>\n//         <a href=\"#\">5</a>\n//         <a href=\"#\">6</a>\n//         <a href=\"#\">&raquo;</a> */}\n//       </div>\n//       </div> \n\n//       </div>\n//       </div>\n\n//     )\n//   }\n// }\n// export default Filter","map":{"version":3,"names":["React","Component","Header","queryString","axios","jsxDEV","_jsxDEV","Filter","constructor","componentDidMount","locationDD","method","url","headers","setState","location","data","console","log","state","handleLocationChange","event","location_id","target","value","sort","mealtype_id","lcost","hcost","cuisine_id","inputObj","length","undefined","restuarant","currentPage","handleCuisineChange","tempArray","slice","indexOf","push","splice","handleCost","handleSort","handleClickPage","Number","id","handlePrev","handleNext","handleViewRestaurant","props","history","option","itemsPerPage","render","lastIndex","firstIndex","currentRestuarant","result","pageNumbers","i","Math","ceil","prevButton","style","display","children","href","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","nextButton","renderPageNumbers","map","number","background","color","item","_id","cursor","src","thumb","alt","borderRadius","margin","fontSize","name","address","locality","cuis","cost","textAlign","fontWeight","onChange","type","for","class"],"sources":["E:/Edureka/zomato/src/Component/Filter.js"],"sourcesContent":["import React, { Component } from 'react'\r\n// import './style11.css'\r\n// import './Style/style1.css'\r\n// import Header from '../HeaderComp/Header'\r\nimport Header from './Header';\r\nimport queryString from 'query-string'\r\nimport axios from 'axios'\r\n\r\n\r\nexport  class Filter extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n        restuarant: [],          // Whole restuarant data.\r\n         option: \"\",              // This shows heading based on what mealtypes we clicks. (ex) Breakfast places in delhi.\r\n        currentPage: 1,           // This is current page which default value is 1.\r\n        itemsPerPage: 2,         // This how many restaurant data will show per page. ideally 2.\r\n        mealtype_id: undefined,  // This is mealtype_id\r\n        location_id: undefined,  // This is location_id\r\n        sort: 1,                 // This is sort value. if (1) = Ascending order , (-1) = Descending order.\r\n        cuisine_id: [],          // This is cuisine_id. Initially empty array.\r\n        lcost: undefined,        // This is minimum price for restaurant.\r\n        hcost: undefined,        // This is maximum price for restaurant.\r\n        location: []             // This is locations dropdown data.\r\n    }\r\n}\r\n\r\n    componentDidMount = async () => {\r\n      // Get the values from query string which is coming from homepage, Quick Search component\r\n    //   const qs = queryString.parse(this.props.location);\r\n    //   const location = qs.location;\r\n    //   const mealtype = Number(qs.mealtype);\r\n    //   const mealtype_name = qs.mealtype_name;\r\n\r\n    //   this.setState({ option: mealtype_name });\r\n    //   // Declare the locations and mealtypes value in payload.\r\n    //   const inputObj = {\r\n    //       location_id: location,\r\n    //       mealtype_id: mealtype\r\n    //   }\r\n\r\n    //   // Making api call to fetch the restaurant data based on payload.\r\n    //   const restuarant = await axios({\r\n    //       method: 'POST',\r\n    //       url: 'http://localhost:8100/filter',\r\n    //       headers: { 'Content-Type': 'application/json' },\r\n    //       data: inputObj\r\n    //   })\r\n    //   // once get the value then update the state variable.\r\n    //   this.setState({ restuarant: restuarant.data, mealtype_id: mealtype, location_id: location });\r\n\r\n      // Making api call for locations data to showing drop-downs filters.\r\n      const locationDD = await axios({\r\n        method: 'GET',\r\n        url: 'http://localhost:8100/locations',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    // Update the location variable in state.\r\n    this.setState({ location: locationDD.data });\r\n    console.log(\"Hello\",this.state.location)\r\n}\r\n\r\n\r\n    // User clicks locations drop down menu this will execute.\r\n    handleLocationChange = async (event) => {\r\n      // Getting the location id from drop-down.\r\n      const location_id = event.target.value;\r\n      console.log(location_id);\r\n      const { sort, mealtype_id, lcost, hcost, cuisine_id } = this.state;\r\n\r\n      // Loading the all values in payload.\r\n      const inputObj = {\r\n          sort: sort,\r\n          mealtype_id: mealtype_id,\r\n          location_id: location_id,\r\n          lcost: lcost,\r\n          hcost: hcost,\r\n          // if cuisine_id is empty array, this function willn't work so set the value as undefined.\r\n          cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\r\n      }\r\n      // Making the api call to get location based restaurant data.\r\n      const restuarant = await axios({\r\n          method: 'POST',\r\n          url: 'http://localhost:8100/filter',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          data: inputObj\r\n      });\r\n      // Once get the data, then update restaurant, location id and page number in 1.\r\n      this.setState({ restuarant: restuarant.data, location_id, currentPage: 1 });\r\n  }\r\n  \r\n  \r\n   // User clicks on cuisine check-box this function will execute.\r\n   handleCuisineChange = async (value) => {\r\n    //get all values from the checkbox and slice the values into tempArray, if repeated selection splice it\r\n    let tempArray = this.state.cuisine_id.slice();\r\n    if (tempArray.indexOf(value) === -1) {\r\n        tempArray.push(value);\r\n    } else {\r\n        tempArray.splice(tempArray.indexOf(value), 1);\r\n    }\r\n\r\n    const { sort, mealtype_id, location_id, lcost, hcost } = this.state;\r\n    // Loading the all values in payload.\r\n    const inputObj = {\r\n        sort: sort,\r\n        mealtype_id: mealtype_id,\r\n        location_id: location_id,\r\n        lcost: lcost,\r\n        hcost: hcost,\r\n        cuisine_id: tempArray.length > 0 ? tempArray : undefined\r\n    }\r\n    // Making the api call to fetch the cuisine based restaurant data.\r\n    const restuarant = await axios({\r\n        method: 'POST',\r\n        url: 'http://localhost:8100/filter',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        data: inputObj\r\n    });\r\n    // Once get the data, then update restaurant, cuisne id and page number in 1.\r\n    this.setState({ restuarant: restuarant.data, cuisine_id: tempArray, currentPage: 1 });\r\n}\r\n\r\n\r\n    // User clicks the cost  button this function will execute.\r\n    handleCost = async (lcost, hcost) => {\r\n      const { sort, mealtype_id, location_id, cuisine_id } = this.state;\r\n      // loading all values in payload.\r\n      const inputObj = {\r\n          sort: sort,\r\n          mealtype_id: mealtype_id,\r\n          location_id: location_id,\r\n          lcost: lcost,\r\n          hcost: hcost,\r\n          // if cuisine_id is empty array, this function willn't work so set the value as undefined.\r\n          cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\r\n\r\n      }\r\n      // making api call to get expected cost based restaurant data.\r\n      const restuarant = await axios({\r\n          method: 'POST',\r\n          url: 'http://localhost:8100/filter',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          data: inputObj\r\n      });\r\n      // Once get the data, then update restaurant, lcost, hcost and page number in 1.\r\n      this.setState({ restuarant: restuarant.data, lcost, hcost, currentPage: 1 });\r\n    }    \r\n\r\n      \r\n    // User clicks the sort button this function will execute.\r\n    handleSort = async (sort) => {\r\n      const { mealtype_id, location_id, lcost, hcost, cuisine_id } = this.state;\r\n      // loading the values in payload\r\n      const inputObj = {\r\n          sort: sort,\r\n          mealtype_id: mealtype_id,\r\n          location_id: location_id,\r\n          lcost: lcost,\r\n          hcost: hcost,\r\n          // if cuisine_id is empty array, this function willn't work so set the value as undefined.\r\n          cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\r\n      }\r\n      // Making api call to sorting data.\r\n      const restuarant = await axios({\r\n          method: 'POST',\r\n          url: 'http://localhost:8100/filter',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          data: inputObj\r\n      })\r\n      // Once get the data, then update restaurant, sort and page number as 1.\r\n      this.setState({ restuarant: restuarant.data, sort, currentPage: 1 })\r\n  }\r\n\r\n   // User clicks the pagenumber will upadate current page number in state.\r\n   handleClickPage = (event) => {\r\n    this.setState({ currentPage: Number(event.target.id) });\r\n}\r\n\r\nhandlePrev = () => {\r\n    this.setState({ currentPage: this.state.currentPage - 1 });\r\n}\r\n\r\nhandleNext = () => {\r\n    this.setState({ currentPage: this.state.currentPage + 1 });\r\n}\r\n\r\nhandleViewRestaurant = (id) => {\r\n    this.props.history.push(`/details?restaurant=${id}`);\r\n}\r\n\r\n  render() {\r\n\r\n    const { restuarant,location,itemsPerPage,currentPage} = this.state;\r\n     // This is the pagination logic to showing restaurant data per page.\r\n     const lastIndex = currentPage * itemsPerPage;\r\n     const firstIndex = lastIndex - itemsPerPage;\r\n     const currentRestuarant = restuarant.slice(firstIndex, lastIndex);\r\n     let result;\r\n\r\n             // Calculating the total page numbers and push into new array.\r\n             const pageNumbers = [];\r\n             for (let i = 1; i <= Math.ceil(restuarant.length / itemsPerPage); i++) {\r\n                 pageNumbers.push(i);\r\n             }   \r\n             // iterating the page numbers and showing in display with styling.\r\n     \r\n             // This is the logic for prev button in pagination\r\n             let prevButton;\r\n             if (pageNumbers.length === 1) {\r\n                 prevButton = <li style={{ display: 'none' }}><a href=\"#\" className=\"page-link\" >Prev</a></li>\r\n             }\r\n             if (pageNumbers.length > 1) {\r\n                 prevButton = <li className=\"page-list\"><a href=\"#\" className=\"page-numbers\" onClick={this.handlePrev}>{`<`}</a></li>\r\n             }\r\n             if (currentPage === 1 && pageNumbers.length > 1) {\r\n                 prevButton = <li className=\"page-list disabled\"><a className=\"page-numbers\" >{`<`}</a></li>\r\n             }\r\n             // This is the logic for next button in pagination\r\n             let nextButton;\r\n             if (pageNumbers.length === 1) {\r\n                 nextButton = <li style={{ display: 'none' }}><a href=\"#\" className=\"page-link\" >Next</a></li>\r\n             }\r\n             if (pageNumbers.length > 1) {\r\n                 nextButton = <li className=\"page-list\"><a href=\"#\" className=\"page-numbers\" onClick={this.handleNext}>{`>`}</a></li>\r\n             }\r\n             if (currentPage === pageNumbers.length && pageNumbers.length > 1) {\r\n                 nextButton = <li className=\"page-list disabled\"><a className=\"page-numbers\">{`>`}</a></li>\r\n             }\r\n             // Rendering page numbers\r\n             let renderPageNumbers = pageNumbers.map(number => {\r\n                 return (\r\n                     <li key={number} className=\"page-list\">\r\n                         <a className=\"page-numbers\" style={currentPage === number ? { background: '#192f60', color: '#fff' } : {}} href=\"#\" id={number} onClick={this.handleClickPage}>{number}</a>\r\n                     </li>\r\n                 )\r\n             })\r\n\r\n             result= (currentRestuarant.length>0) ? currentRestuarant.map((item)=>{\r\n                return     <div className=\"rightGridItem1\">\r\n                <div className=\"col-sm-12\" onClick={() => this.handleViewRestaurant(item._id)} style={{ cursor: 'pointer' }}>\r\n                 <img src={item.thumb }alt=\"Image cannot be displayed\" className=\"imgUdipi\" \r\n                  style={{ borderRadius: \"25px\", margin: \"20px\" }} /> \r\n               <div className=\"divUdipi\"> <span className=\"spanUdipi\" style ={{fontSize:'25px'}}>{item.name}</span><br/>\r\n                    {item.address}<br/>\r\n                 Address   :{item.locality }<hr/>\r\n                 Cuisine   :{item.cuisine_id.map((cuis) => cuis.name + \" \")}<br/>\r\n                 Cost For Two:₹{item.cost}</div>           \r\n                        \r\n            </div>\r\n            </div>  }):<div style={{color:'red',textAlign:'center',fontSize:'35px',fontWeight:'bold'}}>No Restaurants in this Category</div>\r\n\r\n\r\n    return (\r\n      <div>\r\n          <Header/>\r\n           {/* <div className=\"NavBar\" >\r\n        <div className=\"logoE\" >e!</div>\r\n                      <div className=\"NavBar-Box\">\r\n                        <button className=\"LoginButton\" >Login</button>\r\n                        <button className=\"CreateButton\">Create an Account</button>\r\n                      </div>\r\n         </div>  */}\r\n          \r\n\r\n        <h1>Breakfast Places in Mumbai</h1>\r\n\r\n     {/*<!--Grid with 2 columns.Left grid with filter options and right grid with restaurant details-->  */} \r\n     <div className=\"parentContainer\" >\r\n        <div className=\"leftDiv\">\r\n                <h3> Filters</h3> \r\n                <h3>Select Location</h3>\r\n                <select className=\"Location\" onChange={this.handleLocationChange}>\r\n                  {location.map((item)=>{\r\n                    return <option value={item.location_id}>{item.name}</option>\r\n                  })}\r\n                    {/* <option value=\"nmum\" >North Mumbai</option>\r\n                    <option value=\"smum\" >South Mumbai</option>\r\n                    <option value=\"emum\" >East Mumbai</option>\r\n                    <option value=\"wmum\" >West Mumbai</option>\r\n                    <option value=\"Thane\" >Thane</option> */}\r\n                </select>\r\n\r\n                <div className=\"Cuisine\"><h3>Cuisine</h3>                \r\n                <input type=\"checkbox\" name=\"north\" value=\"N_Indian\" onChange={() => this.handleCuisineChange(1)}/>\r\n                <label for=\"north\"> North Indian</label><br/>\r\n                <input type=\"checkbox\"  name=\"south\" value=\"S_Indian\" onChange={() => this.handleCuisineChange(2)}/>\r\n                <label for=\"south\"> South Indian</label><br/>\r\n                <input type=\"checkbox\"  name=\"chinese\" value=\"Chinese\" onChange={() => this.handleCuisineChange(3)}/>\r\n                <label for=\"chinese\"> Chinese</label><br/>\r\n                <input type=\"checkbox\"  name=\"ffood\" value=\"F_Food\" onChange={() => this.handleCuisineChange(4)}/>\r\n                <label for=\"ffood\"> Fast Food</label><br/>\r\n                <input type=\"checkbox\"  name=\"sfood\" value=\"S_Food\"onChange={() => this.handleCuisineChange(5)}/>\r\n                <label for=\"sfood\"> Street Food</label>\r\n                </div>\r\n\r\n                <div className=\"cost2Div\" > <h3>Cost for two</h3>\r\n                <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1, 500)}/>\r\n                <label>Less Than &#8377;500</label>\r\n         \r\n    <br/>\r\n                <input type=\"radio\" className=\"cuisinoption\" name=\"cost\"onChange={() => this.handleCost(500,1000)}/>\r\n                <label>&#8377;500 to &#8377;1000</label>\r\n                \r\n                </div>\r\n    \r\n                <div className=\"CusineOptions\">\r\n                <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1000, 1500)}/>\r\n                <label>&#8377;1000 to &#8377;1500</label>\r\n              \r\n    <br/>\r\n                <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1500, 2000)}/>\r\n                <label>&#8377;1500 to &#8377;2000</label>\r\n                \r\n    <br/>\r\n                <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(2000, 2500)}/>\r\n                <label>&#8377;2000+</label>\r\n                \r\n                </div>\r\n\r\n              <div className=\"sort\"><h3>Sort</h3>\r\n              <input type=\"radio\" className=\"cuisinoption\" name=\"price\" onChange={() => this.handleSort(1)}/>\r\n              <label>price low to high</label>\r\n             \r\n  <br/>\r\n              <input type=\"radio\" className=\"cuisinoption\" name=\"price\" onChange={() => this.handleSort(-1)}/>\r\n              <label>price high to low</label>\r\n             \r\n            </div>  \r\n            \r\n        </div>\r\n        <div className=\"rightDiv\">\r\n        \r\n              {/* {(restuarant.lengtht>0) ?   */}\r\n            {/* {result= (currentRestuarant.length>0) ? currentRestuarant.map((item)=>{\r\n                return     <div className=\"rightGridItem1\">\r\n                <div className=\"col-sm-12\" onClick={() => this.handleViewRestaurant(item._id)} style={{ cursor: 'pointer' }}>\r\n                 <img src={item.thumb }alt=\"Image cannot be displayed\" className=\"imgUdipi\" \r\n                  style={{ borderRadius: \"25px\", margin: \"20px\" }} /> \r\n               <div className=\"divUdipi\"> <span className=\"spanUdipi\" style ={{fontSize:'25px'}}>{item.name}</span><br/>\r\n                    {item.address}<br/>\r\n                 Address   :{item.locality }<hr/>\r\n                 Cuisine   :{item.cuisine_id.map((cuis) => cuis.name + \" \")}<br/>\r\n                 Cost For Two:₹{item.cost}</div>           \r\n                        \r\n            </div>\r\n            </div>  }):<div style={{color:'red',textAlign:'center',fontSize:'35px',fontWeight:'bold'}}>No Restaurants in this Category</div>} */}\r\n         \r\n            <div class=\"Pagination\">\r\n                {result}\r\n                <div  >\r\n                   \r\n                                        {/* Rendering Page numbers */}\r\n                                        {prevButton}\r\n                                        {renderPageNumbers}\r\n                                        {nextButton}\r\n                   \r\n                </div>\r\n        {/* <a href=\"#\">&laquo;</a>\r\n        <a href=\"#\">1</a>\r\n        <a href=\"#\">2</a>\r\n        <a href=\"#\">3</a>\r\n        <a href=\"#\">4</a>\r\n        <a href=\"#\">5</a>\r\n        <a href=\"#\">6</a>\r\n        <a href=\"#\">&raquo;</a> */}\r\n      </div>\r\n      </div> \r\n      \r\n      </div>\r\n      </div>\r\n     \r\n    )\r\n  }\r\n}\r\nexport default Filter\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from 'react'\r\n// // import './style11.css'\r\n\r\n// // import Header from '../HeaderComp/Header'\r\n// import queryString from 'query-string'\r\n// import axios from 'axios'\r\n\r\n\r\n// export  class Filter extends Component {\r\n//   constructor() {\r\n//     super();\r\n//     this.state = {\r\n//         restuarant: [],          // Whole restuarant data.\r\n//         // option: \"\",              // This shows heading based on what mealtypes we clicks. (ex) Breakfast places in delhi.\r\n//         currentPage: 1,           // This is current page which default value is 1.\r\n//         itemsPerPage: 2,         // This how many restaurant data will show per page. ideally 2.\r\n//         mealtype_id: undefined,  // This is mealtype_id\r\n//         location_id: undefined,  // This is location_id\r\n//         sort: 1,                 // This is sort value. if (1) = Ascending order , (-1) = Descending order.\r\n//         cuisine_id: [],          // This is cuisine_id. Initially empty array.\r\n//         lcost: undefined,        // This is minimum price for restaurant.\r\n//         hcost: undefined,        // This is maximum price for restaurant.\r\n//         location: []             // This is locations dropdown data.\r\n//     }\r\n// }\r\n\r\n//     componentDidMount = async () => {\r\n//       // Get the values from query string which is coming from homepage, Quick Search component\r\n//       const qs = queryString.parse(this.props.location.search);\r\n//       const location = qs.location;\r\n//       const mealtype = Number(qs.mealtype);\r\n//       const mealtype_name = qs.mealtype_name;\r\n// console.log(mealtype_name)\r\n//       this.setState({ option: mealtype_name });\r\n//       // Declare the locations and mealtypes value in payload.\r\n//       const inputObj = {\r\n//           location_id: location,\r\n//           mealtype_id: mealtype\r\n//       }\r\n\r\n//       // Making api call to fetch the restaurant data based on payload.\r\n//       const restuarant = await axios({\r\n//           method: 'POST',\r\n//           url: 'http://localhost:8100/filter',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           data: inputObj\r\n//       })\r\n//       // once get the value then update the state variable.\r\n//       this.setState({ restuarant: restuarant.data, mealtype_id: mealtype, location_id: location });\r\n\r\n//       // Making api call for locations data to showing drop-downs filters.\r\n//       const locationDD = await axios({\r\n//         method: 'GET',\r\n//         url: 'http://localhost:8100/locations',\r\n//         headers: { 'Content-Type': 'application/json' }\r\n//     });\r\n//     // Update the location variable in state.\r\n//     this.setState({ location: locationDD.data });\r\n//     console.log(\"Hello\",this.state.location)\r\n// }\r\n\r\n\r\n//     // User clicks locations drop down menu this will execute.\r\n//     handleLocationChange = async (event) => {\r\n//       // Getting the location id from drop-down.\r\n//       const location_id = event.target.value;\r\n//       console.log(location_id);\r\n//       const { sort, mealtype_id, lcost, hcost, cuisine_id } = this.state;\r\n\r\n//       // Loading the all values in payload.\r\n//       const inputObj = {\r\n//           sort: sort,\r\n//           mealtype_id: mealtype_id,\r\n//           location_id: location_id,\r\n//           lcost: lcost,\r\n//           hcost: hcost,\r\n//           // if cuisine_id is empty array, this function willn't work so set the value as undefined.\r\n//           cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\r\n//       }\r\n//       // Making the api call to get location based restaurant data.\r\n//       const restuarant = await axios({\r\n//           method: 'POST',\r\n//           url: 'http://localhost:8100/filter',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           data: inputObj\r\n//       });\r\n//       // Once get the data, then update restaurant, location id and page number in 1.\r\n//       this.setState({ restuarant: restuarant.data, location_id, currentPage: 1 });\r\n//   }\r\n  \r\n  \r\n//    // User clicks on cuisine check-box this function will execute.\r\n//    handleCuisineChange = async (value) => {\r\n//     //get all values from the checkbox and slice the values into tempArray, if repeated selection splice it\r\n//     let tempArray = this.state.cuisine_id.slice();\r\n//     if (tempArray.indexOf(value) === -1) {\r\n//         tempArray.push(value);\r\n//     } else {\r\n//         tempArray.splice(tempArray.indexOf(value), 1);\r\n//     }\r\n\r\n//     const { sort, mealtype_id, location_id, lcost, hcost } = this.state;\r\n//     // Loading the all values in payload.\r\n//     const inputObj = {\r\n//         sort: sort,\r\n//         mealtype_id: mealtype_id,\r\n//         location_id: location_id,\r\n//         lcost: lcost,\r\n//         hcost: hcost,\r\n//         cuisine_id: tempArray.length > 0 ? tempArray : undefined\r\n//     }\r\n//     // Making the api call to fetch the cuisine based restaurant data.\r\n//     const restuarant = await axios({\r\n//         method: 'POST',\r\n//         url: 'http://localhost:8100/filter',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         data: inputObj\r\n//     });\r\n//     // Once get the data, then update restaurant, cuisne id and page number in 1.\r\n//     this.setState({ restuarant: restuarant.data, cuisine_id: tempArray, currentPage: 1 });\r\n// }\r\n\r\n\r\n//     // User clicks the cost  button this function will execute.\r\n//     handleCost = async (lcost, hcost) => {\r\n//       const { sort, mealtype_id, location_id, cuisine_id } = this.state;\r\n//       // loading all values in payload.\r\n//       const inputObj = {\r\n//           sort: sort,\r\n//           mealtype_id: mealtype_id,\r\n//           location_id: location_id,\r\n//           lcost: lcost,\r\n//           hcost: hcost,\r\n//           // if cuisine_id is empty array, this function willn't work so set the value as undefined.\r\n//           cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\r\n\r\n//       }\r\n//       // making api call to get expected cost based restaurant data.\r\n//       const restuarant = await axios({\r\n//           method: 'POST',\r\n//           url: 'http://localhost:8100/filter',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           data: inputObj\r\n//       });\r\n//       // Once get the data, then update restaurant, lcost, hcost and page number in 1.\r\n//       this.setState({ restuarant: restuarant.data, lcost, hcost, currentPage: 1 });\r\n//     }    \r\n\r\n      \r\n//     // User clicks the sort button this function will execute.\r\n//     handleSort = async (sort) => {\r\n//       const { mealtype_id, location_id, lcost, hcost, cuisine_id } = this.state;\r\n//       // loading the values in payload\r\n//       const inputObj = {\r\n//           sort: sort,\r\n//           mealtype_id: mealtype_id,\r\n//           location_id: location_id,\r\n//           lcost: lcost,\r\n//           hcost: hcost,\r\n//           // if cuisine_id is empty array, this function willn't work so set the value as undefined.\r\n//           cuisine_id: cuisine_id && cuisine_id.length > 0 ? cuisine_id : undefined\r\n//       }\r\n//       // Making api call to sorting data.\r\n//       const restuarant = await axios({\r\n//           method: 'POST',\r\n//           url: 'http://localhost:8100/filter',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           data: inputObj\r\n//       })\r\n//       // Once get the data, then update restaurant, sort and page number as 1.\r\n//       this.setState({ restuarant: restuarant.data, sort, currentPage: 1 })\r\n//   }\r\n\r\n//    // User clicks the pagenumber will upadate current page number in state.\r\n//    handleClickPage = (event) => {\r\n//     this.setState({ currentPage: Number(event.target.id) });\r\n// }\r\n\r\n// handlePrev = () => {\r\n//     this.setState({ currentPage: this.state.currentPage - 1 });\r\n// }\r\n\r\n// handleNext = () => {\r\n//     this.setState({ currentPage: this.state.currentPage + 1 });\r\n// }\r\n\r\n// handleViewRestaurant = (id) => {\r\n//     this.props.history.push(`/details?restaurant=${id}`);\r\n// }\r\n\r\n//   render() {\r\n\r\n//     const { restuarant,location,itemsPerPage,currentPage} = this.state;\r\n//      // This is the pagination logic to showing restaurant data per page.\r\n//      const lastIndex = currentPage * itemsPerPage;\r\n//      const firstIndex = lastIndex - itemsPerPage;\r\n//      const currentRestuarant = restuarant.slice(firstIndex, lastIndex);\r\n//      let result;\r\n\r\n//              // Calculating the total page numbers and push into new array.\r\n//              const pageNumbers = [];\r\n//              for (let i = 1; i <= Math.ceil(restuarant.length / itemsPerPage); i++) {\r\n//                  pageNumbers.push(i);\r\n//              }   \r\n//              // iterating the page numbers and showing in display with styling.\r\n     \r\n//              // This is the logic for prev button in pagination\r\n//              let prevButton;\r\n//              if (pageNumbers.length === 1) {\r\n//                  prevButton = <li style={{ display: 'none' }}><a href=\"#\" className=\"page-link\" >Prev</a></li>\r\n//              }\r\n//              if (pageNumbers.length > 1) {\r\n//                  prevButton = <li className=\"page-list\"><a href=\"#\" className=\"page-numbers\" onClick={this.handlePrev}>{`<`}</a></li>\r\n//              }\r\n//              if (currentPage === 1 && pageNumbers.length > 1) {\r\n//                  prevButton = <li className=\"page-list disabled\"><a className=\"page-numbers\" >{`<`}</a></li>\r\n//              }\r\n//              // This is the logic for next button in pagination\r\n//              let nextButton;\r\n//              if (pageNumbers.length === 1) {\r\n//                  nextButton = <li style={{ display: 'none' }}><a href=\"#\" className=\"page-link\" >Next</a></li>\r\n//              }\r\n//              if (pageNumbers.length > 1) {\r\n//                  nextButton = <li className=\"page-list\"><a href=\"#\" className=\"page-numbers\" onClick={this.handleNext}>{`>`}</a></li>\r\n//              }\r\n//              if (currentPage === pageNumbers.length && pageNumbers.length > 1) {\r\n//                  nextButton = <li className=\"page-list disabled\"><a className=\"page-numbers\">{`>`}</a></li>\r\n//              }\r\n//              // Rendering page numbers\r\n//              let renderPageNumbers = pageNumbers.map(number => {\r\n//                  return (\r\n//                      <li key={number} className=\"page-list\">\r\n//                          <a className=\"page-numbers\" style={currentPage === number ? { background: '#192f60', color: '#fff' } : {}} href=\"#\" id={number} onClick={this.handleClickPage}>{number}</a>\r\n//                      </li>\r\n//                  )\r\n//              })\r\n\r\n//              result= (currentRestuarant.length>0) ? currentRestuarant.map((item)=>{\r\n//                 return     <div className=\"rightGridItem1\">\r\n//                 <div className=\"col-sm-12\" onClick={() => this.handleViewRestaurant(item._id)} style={{ cursor: 'pointer' }}>\r\n//                  <img src={item.thumb }alt=\"Image cannot be displayed\" className=\"imgUdipi\" \r\n//                   style={{ borderRadius: \"25px\", margin: \"20px\" }} /> \r\n//                <div className=\"divUdipi\"> <span className=\"spanUdipi\" style ={{fontSize:'25px'}}>{item.name}</span><br/>\r\n//                     {item.address}<br/>\r\n//                  Address   :{item.locality }<hr/>\r\n//                  Cuisine   :{item.cuisine_id.map((cuis) => cuis.name + \" \")}<br/>\r\n//                  Cost For Two:₹{item.cost}</div>           \r\n                        \r\n//             </div>\r\n//             </div>  }):<div style={{color:'red',textAlign:'center',fontSize:'35px',fontWeight:'bold'}}>No Restaurants in this Category</div>\r\n\r\n\r\n//     return (\r\n//       <div>\r\n//           {/* <Header/> */}\r\n//            {/* <div className=\"NavBar\" >\r\n//         <div className=\"logoE\" >e!</div>\r\n//                       <div className=\"NavBar-Box\">\r\n//                         <button className=\"LoginButton\" >Login</button>\r\n//                         <button className=\"CreateButton\">Create an Account</button>\r\n//                       </div>\r\n//          </div>  */}\r\n          \r\n\r\n//         <h1>Breakfast Places in Mumbai</h1>\r\n\r\n//      {/*<!--Grid with 2 columns.Left grid with filter options and right grid with restaurant details-->  */} \r\n//      <div className=\"parentContainer\" >\r\n//         <div className=\"leftDiv\">\r\n//                 <h3> Filters</h3> \r\n//                 <h3>Select Location</h3>\r\n        \r\n//                 <select className=\"Location\" onChange={this.handleLocationChange}>\r\n//                   {location.map((item)=>{\r\n//                     return <option value={item.location_id}>{item.name}</option>\r\n//                   })}\r\n//                     {/* <option value=\"nmum\" >North Mumbai</option>\r\n//                     <option value=\"smum\" >South Mumbai</option>\r\n//                     <option value=\"emum\" >East Mumbai</option>\r\n//                     <option value=\"wmum\" >West Mumbai</option>\r\n//                     <option value=\"Thane\" >Thane</option> */}\r\n//                 </select>\r\n            \r\n//                 <div className=\"Cuisine\"><h3>Cuisine</h3>                \r\n//                 <input type=\"checkbox\" name=\"north\" value=\"N_Indian\" onChange={() => this.handleCuisineChange(1)}/>\r\n//                 <label for=\"north\"> North Indian</label><br/>\r\n//                 <input type=\"checkbox\"  name=\"south\" value=\"S_Indian\" onChange={() => this.handleCuisineChange(2)}/>\r\n//                 <label for=\"south\"> South Indian</label><br/>\r\n//                 <input type=\"checkbox\"  name=\"chinese\" value=\"Chinese\" onChange={() => this.handleCuisineChange(3)}/>\r\n//                 <label for=\"chinese\"> Chinese</label><br/>\r\n//                 <input type=\"checkbox\"  name=\"ffood\" value=\"F_Food\" onChange={() => this.handleCuisineChange(4)}/>\r\n//                 <label for=\"ffood\"> Fast Food</label><br/>\r\n//                 <input type=\"checkbox\"  name=\"sfood\" value=\"S_Food\"onChange={() => this.handleCuisineChange(5)}/>\r\n//                 <label for=\"sfood\"> Street Food</label>\r\n//                 </div>\r\n\r\n//                 <div className=\"cost2Div\" > <h3>Cost for two</h3>\r\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1, 500)}/>\r\n//                 <label>Less Than &#8377;500</label>\r\n         \r\n//     <br/>\r\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\"onChange={() => this.handleCost(500,1000)}/>\r\n//                 <label>&#8377;500 to &#8377;1000</label>\r\n                \r\n//                 </div>\r\n    \r\n//                 <div className=\"CusineOptions\">\r\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1000, 1500)}/>\r\n//                 <label>&#8377;1000 to &#8377;1500</label>\r\n              \r\n//     <br/>\r\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(1500, 2000)}/>\r\n//                 <label>&#8377;1500 to &#8377;2000</label>\r\n                \r\n//     <br/>\r\n//                 <input type=\"radio\" className=\"cuisinoption\" name=\"cost\" onChange={() => this.handleCost(2000, 2500)}/>\r\n//                 <label>&#8377;2000+</label>\r\n                \r\n//                 </div>\r\n\r\n//               <div className=\"sort\"><h3>Sort</h3>\r\n//               <input type=\"radio\" className=\"cuisinoption\" name=\"price\" onChange={() => this.handleSort(1)}/>\r\n//               <label>price low to high</label>\r\n             \r\n//   <br/>\r\n//               <input type=\"radio\" className=\"cuisinoption\" name=\"price\" onChange={() => this.handleSort(-1)}/>\r\n//               <label>price high to low</label>\r\n             \r\n//             </div>  \r\n            \r\n//         </div>\r\n//         <div className=\"rightDiv\">\r\n        \r\n//               {/* {(restuarant.lengtht>0) ?   */}\r\n//             {/* {result= (currentRestuarant.length>0) ? currentRestuarant.map((item)=>{\r\n//                 return     <div className=\"rightGridItem1\">\r\n//                 <div className=\"col-sm-12\" onClick={() => this.handleViewRestaurant(item._id)} style={{ cursor: 'pointer' }}>\r\n//                  <img src={item.thumb }alt=\"Image cannot be displayed\" className=\"imgUdipi\" \r\n//                   style={{ borderRadius: \"25px\", margin: \"20px\" }} /> \r\n//                <div className=\"divUdipi\"> <span className=\"spanUdipi\" style ={{fontSize:'25px'}}>{item.name}</span><br/>\r\n//                     {item.address}<br/>\r\n//                  Address   :{item.locality }<hr/>\r\n//                  Cuisine   :{item.cuisine_id.map((cuis) => cuis.name + \" \")}<br/>\r\n//                  Cost For Two:₹{item.cost}</div>           \r\n                        \r\n//             </div>\r\n//             </div>  }):<div style={{color:'red',textAlign:'center',fontSize:'35px',fontWeight:'bold'}}>No Restaurants in this Category</div>} */}\r\n         \r\n//             <div class=\"Pagination\">\r\n//                 {result}\r\n//                 <div  >\r\n                   \r\n//                                         {/* Rendering Page numbers */}\r\n//                                         {prevButton}\r\n//                                         {renderPageNumbers}\r\n//                                         {nextButton}\r\n                   \r\n//                 </div>\r\n//         {/* <a href=\"#\">&laquo;</a>\r\n//         <a href=\"#\">1</a>\r\n//         <a href=\"#\">2</a>\r\n//         <a href=\"#\">3</a>\r\n//         <a href=\"#\">4</a>\r\n//         <a href=\"#\">5</a>\r\n//         <a href=\"#\">6</a>\r\n//         <a href=\"#\">&raquo;</a> */}\r\n//       </div>\r\n//       </div> \r\n      \r\n//       </div>\r\n//       </div>\r\n     \r\n//     )\r\n//   }\r\n// }\r\n// export default Filter"],"mappings":"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AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}